{
  "expressions": {
    "title": "Expressions",
    "readings": [
      {
        "id": "intro-js",
        "title": "Hello, JavaScript!",
        "base": "https://courses.cs.northwestern.edu/394/guides/intro-js.php",
        "notes": "Read from the [Introduction](#introduction) through [Composition of expressions](#expression-composition)"
      }
    ],
    "exercises": {
      "rectPerimeter": {
        "given": "two numbers, representing width and height of a rectangle",
        "returns": "the perimeter of the rectangle",
        "tests": [
          {
            "inputs": [ 4, 5 ],
            "output": 18
          },
          {
            "inputs": [ 9, 3 ],
            "output": 24
          }
        ]
      },
      "rectArea": {
        "given": "two numbers, representing width and height of a rectangle",
        "returns": "the area of the rectangle",
        "tests": [
          {
            "inputs": [ 4, 5 ],
            "output": 20
          },
          {
            "inputs": [ 9, 3 ],
            "output": 27
          }
        ]
      },
      "triArea": {
        "given": "two numbers, representing base and height of a triangle",
        "returns": "the area of the triangle",
        "tests": [
          {
            "inputs": [ 4, 5 ],
            "output": 10
          },
          {
            "inputs": [ 9, 3 ],
            "output": 13.5
          }
        ]
      },
      "ringArea": {
        "given": "two numbers, representing the radii for one circle nested inside another circle",
        "returns": "the area of the ring between the inner and outer circle",
        "tests": [
          {
            "inputs": [ 1, 4 ],
            "output": 47.12388980384689

          },
          {
            "inputs": [ 5, 7 ],
            "output": 75.39822368615502
          },
          {
            "inputs": [ 6, 6 ],
            "output": 0
          }
        ]
      },
      "f2c": {
        "given": "one number, representing temperature in Fahrenheit",
        "returns": "the equivalent temperature in Celsius",
        "tests": [
          {
            "inputs": [ 32 ],
            "output": 0

          },
          {
            "inputs": [ 100 ],
            "output": 37.77777777777778
          },
          {
            "inputs": [ 0 ],
            "output": -17.77777777777778
          },
          {
            "inputs": [ -40 ],
            "output": -40
          }
        ]
      },
      "c2f": {
        "given": "one number, representing temperature in Celsius",
        "returns": "the equivalent temperature in Fahrenheit",
        "tests": [
          {
            "inputs": [ 40 ],
            "output": 104

          },
          {
            "inputs": [ 100 ],
            "output": 212
          },
          {
            "inputs": [ 0 ],
            "output": 32
          },
          {
            "inputs": [ -40 ],
            "output": -40
          }
        ]
      }
    }
  },
  "strings": {
    "title": "Strings",
    "readings": [
      {
        "id": "intro-js",
        "title": "Hello, JavaScript!",
        "base": "https://courses.cs.northwestern.edu/394/guides/intro-js.php",
        "notes": "Read [Strings](#strings)"
      },
      {
        "id": "mdn-strings",
        "title": "String methods at MDN",
        "base": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"
      }
    ],
    "exercises": {
      "makeName": {
        "given": "two strings, representing a first and last name",
        "returns": "the name in the form 'last, first'",
        "tests": [
          {
            "inputs": ["Pat", "Smith"],
            "output": "Smith, Pat"
          },
          {
            "inputs": ["Mary Wollstonecraft", "Shelley"],
            "output": "Shelley, Mary Wollstonecraft"
          }
        ]
      },
      "ellide": {
        "given": "a string S and a non-negative integer N",
        "returns": "a string of the form 'X...' where X is the first N characters of S",
        "note": "The string S can be assumed to be at least N characters long.",
        "tests": [
          {
            "inputs": ["Now is the time for all good people.", 6],
            "output": "Now is..."
          },
          {
            "inputs": ["Look!", 5],
            "output": "Look!..."
          }
        ]
      }
    }
  },
  "conditionals": {
    "title": "Conditionals",
    "readings": [
      {
        "id": "intro-js",
        "title": "Hello, JavaScript!",
        "base": "https://courses.cs.northwestern.edu/394/guides/intro-js.php",
        "notes": "Read from the [Objects](#objects) through [Composition of conditionals](#conditional-composition)"
      }
    ],
    "exercises": {
      "longer": {
        "given": "two strings",
        "returns": "the longer string",
        "tests": [
          {
            "inputs": ["abcd", "def"],
            "output": "abcd"
          },
          {
            "inputs": ["abc", "defg"],
            "output": "defg"
          },
          {
            "inputs": ["abc", "def"],
            "output": "abc"
          }
        ]
      },
      "mid3": {
        "given": "three numbers",
        "returns": "the number in the middle",
        "tests": [
          {
            "inputs": [ 5, 8, 2],
            "output": 5
          },
          {
            "inputs": [ 2, 5, 8 ],
            "output": 5
          },
          {
            "inputs": [ 8, 5, 2 ],
            "output": 5
          },
          {
            "inputs": [ 5, 2, 8 ],
            "output": 5
          },
          {
            "inputs": [ 2, 2, 8 ],
            "output": 2
          },
          {
            "inputs": [ 8, 2, 8 ],
            "output": 8
          },
          {
            "inputs": [ 8, 8, 8 ],
            "output": 8
          }
        ]
      },
      "lastFirst": {
        "given": "an object representing a person's name, with properties first and last",
        "returns": "a string of the form 'last, first' if both are present, else just the part given",
        "tests": [
          {
            "inputs": [{ "first": "Mary", "last": "Smith" }],
            "output": "Smith, Mary"
          },
          {
            "inputs": [{ "first": "Mary" }],
            "output": "Mary"
          },
          {
            "inputs": [{ "last": "Smith" }],
            "output": "Smith"
          },
          {
            "inputs": [{  }],
            "output": ""
          }
        ]
      }
    }
  },
  "arrays": {
    "title": "Arrays",
    "readings": [
      {
        "id": "intro-js",
        "title": "Hello, JavaScript!",
        "base": "https://courses.cs.northwestern.edu/394/guides/intro-js.php",
        "notes": "Read from the [Arrays](#arrays) through [Composition by chaining](#chaining)"
      }
    ],
    "exercises": {
      "subArray": {
        "given": "two arguments, an array and a second array of indices for the first array",
        "returns": "an array of the elements in the first array at the given indices",
        "tests": [
          {
            "inputs": [
              ["a", "b", "c", "d", "e"],
              [3, 1]
            ],
            "output": ["d", "b"]
          },
          {
            "inputs": [
              ["a", "b", "c", "d", "e"],
              []
            ],
            "output": []
          },
          {
            "inputs": [
              ["a", "b", "c", "d", "e"],
              [0, 0]
            ],
            "output": ["a", "a"]
          }
        ]
      },
      "over21": {
        "given": "an array of \"person\" objects, each with a name and age keys",
        "returns": "an array of the people 21 or older",
        "tests": [
          {
            "inputs": [
              [
                {
                  "name": "John",
                  "age": 12
                },
                {
                  "name": "Annie",
                  "age": 41
                },
                {
                  "age": 21,
                  "name": "Mary"
                }
              ]
            ],
            "output": [
              {
                "name": "Annie",
                "age": 41
              },
              {
                "age": 21,
                "name": "Mary"
              }
            ]
          },
          {
            "inputs": [
                [
                  {
                    "name": "John",
                    "age": 12
                  },
                  {
                    "age": 19,
                    "name": "Glenda"
                  }
                ]
              ],
              "output": []
          }
        ]
      },
      "product": {
        "given": "an array of numbers",
        "returns": "the product of the numbers",
        "tests": [
          {
            "inputs": [
              [1, 2, 3, 4, 5]
            ],
            "output": 120
          },
          {
            "inputs": [
              [1, 2, 3, 0, 5]
            ],
            "output": 0
          }
        ]
      },
      "getRepeats": {
        "given": "an array",
        "returns": "an array of the items that repeat, in order of first occurrence",
        "note": "It should work well.",
        "tests": [
          {
            "inputs": [
              [1, 2, 3, 3, 2, 4, 5, 3, 1]
            ],
            "output": [1, 2, 3]
          },
          {
            "inputs": [
              [3, 7, 11, 13, 17]
            ],
            "output": []
          },
          {
            "inputs": [
              [6, 67, -6, 23, 6, 3, 11, 100, 23, 6, 0, 3]
            ],
            "output": [6, 23, 3]
          },
          {
            "inputs": [
              []
            ],
            "output": []
          }
        ]
      },
      "aboveAverage": {
        "given": "a list of exam scores",
        "returns": "a list of those exam scores that are above the average score",
        "tests": [
          {
            "inputs": [
              [{"name":"pat","score":67},{"name":"sandy","score":82},{"name":"max","score":72},{"name":"andy","score":91},{"name":"drew","score":86}]
            ],
            "output": [{"name":"sandy","score":82},{"name":"andy","score":91},{"name":"drew","score":86}]
          },
          {
            "inputs": [
              [{"name":"pat","score":67}]
            ],
            "output": []
          },
          {
            "inputs": [
              []
            ],
            "output": []
          }
        ]
      }
    }
  },
  "arrays-strings": {
    "title": "Arrays and Strings",
    "readings": [
      {
        "id": "intro-js",
        "title": "Hello, JavaScript!",
        "base": "https://courses.cs.northwestern.edu/394/guides/intro-js.php",
        "notes": "Read [Working with mixed types](#mixed-types)"
      }
    ],
    "exercises": {
      "reverseNumber": {
        "given": "a non-negative integer",
        "returns": "the integer reversed",
        "tests": [
          {
            "inputs": [32443],
            "output": 34423
          },
          {
            "inputs": [12345],
            "output": 54321
          },
          {
            "inputs": [12000],
            "output": 21
          }
        ]
      },
      "isWordAnagram": {
        "given": "two words, in string form",
        "returns": "true if the words are anagrams",
        "note": "Hint: sorting is useful here.",
        "tests": [
          {
            "inputs": ["spear", "spare"],
            "output": true
          },
          {
            "inputs": ["below", "elbow"],
            "output": true
          },
          {
            "inputs": ["apple", "pale"],
            "output": false
          }
        ]
      },
      "isPhraseAnagram": {
        "given": "two phrases, in string form",
        "returns": "true if the phrases are anagrams",
        "note": "Ignore spaces and capitalization.",
        "tests": [
          {
            "inputs": ["The eyes", "they see"],
            "output": true
          },
          {
            "inputs": ["Conversation", "Voices rant on"],
            "output": true
          },
          {
            "inputs": ["Ergo I am", "I am ego"],
            "output": false
          }
        ]
      },
      "longestWords": {
        "given": "a phrase in string form",
        "returns": "a list of the longest words",
        "tests": [
          {
            "inputs": ["I think therefore I am"],
            "output": ["therefore"]
          },
          {
            "inputs": ["The quick brown fox jumped over the lazy dog."],
            "output": ["jumped"]
          },
          {
            "inputs": ["Once upon a time"],
            "output": ["Once", "upon", "time"]
          },
          {
            "inputs": [""],
            "output": []
          }
        ]
      }
    }
  },
  "dom-operations": {
    "title": "DOM Operations",
    "readings": [
      {
        "id": "intro-js",
        "title": "Hello, JavaScript!",
        "base": "https://courses.cs.northwestern.edu/394/guides/intro-js.php",
        "notes": "Read [Working with the DOM](#dom-operations)"
      }
    ],
    "exercises": {
      "moduleTitles": {
        "given": "no arguments",
        "returns": "an array of the exercise module titles",
        "tests": [
          {
            "inputs": [],
            "output": ["Expressions", "Strings", "Conditionals", "Arrays", "Arrays and Strings", "DOM Operations"]
          }
        ]
      },
      "goPurple": {
        "given": "no arguments",
        "returns": "the string 'Go Purple!' after changing the exercise name to white text on purple",
        "tests": [
          {
            "inputs": [],
            "output": "Go Purple!"
          }
        ]
      },
      "copycat": {
        "given": "a number n between 1 and the number of test cases",
        "returns": "whatever the nth test case says, because it cheat and copies the answer!",
        "note": "Calling eval is allowed.",
        "tests": [
          {
            "inputs": [1],
            "output": 100
          },
          {
            "inputs": [2],
            "output": "hello!"
          },
          {
            "inputs": [3],
            "output": [1, 2, 3]
          }
        ]
      }
    }
  }
}